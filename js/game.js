(function(window, document) {

  //Initialize constants
  const FIELD_SIZE = 400; //This is how big the canvas is
  const SIZE = 10; //Size of grid cell for drawing snake and food
  const SNAKE_SIZE = 5; //Initial snake length
  const ARROW_MAP = {
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down'
  };

  //Grab the current context of the canvas for drawing.
  const _context = document.getElementById('field').getContext('2d');

  //Initialize game objects that are available within the module
  let _food = {};
  let _snake = [{ x: 0, y: FIELD_SIZE / 4 }]; //We are going to start from the top left
  let _dir = 'right'; //Initial Direction
  let _newDir = null; //New Direction on user input
  let _gameTimer = null;

  function drawFood() {
    // Food needs to be in multiples of the cell size between 0 and 400
    let x = Math.floor(Math.random() * FIELD_SIZE / SIZE) * SIZE;
    let y = Math.floor(Math.random() * FIELD_SIZE / SIZE) * SIZE;

    _food = { x, y };
    _context.rect(_food.x, _food.y, SIZE, SIZE);
    _context.fill();
  }

  function drawSnake() {
    for (let i = 1; i < SNAKE_SIZE; i++) {
      let [{ x, y }] = _snake;
      _snake.unshift({
        x: (x += SIZE),
        y
      });
    }
    for (let square of _snake) {
      _context.rect(square.x, square.y, SIZE, SIZE);
      _context.fill();
    }
  }

  function moveSnake() {
    _context.beginPath();
    let headX;
    let headY;
    //Determine what the head is depending on the new direction
    if (
      (_dir === 'up' && _newDir === 'down') ||
      (_dir === 'down' && _newDir === 'up') ||
      (_dir === 'right' && _newDir === 'left') ||
      (_dir === 'left' && _newDir === 'right')
    ) {
      headX = _snake[_snake.length - 1].x;
      headY = _snake[_snake.length - 1].y;
    } else {
      headX = _snake[0].x;
      headY = _snake[0].y;
    }
    //The moving illusion is generated by clearing off the last square and adding new one to the front
    let tail = _snake.pop();
    _context.clearRect(tail.x, tail.y, SIZE, SIZE);

    _dir = _newDir || _dir;
    let { x, y } = drawSquare(headX, headY);
    _snake.unshift({
      x,
      y
    });
  }

  function drawSquare(headX, headY) {
    let newHeadX;
    let newHeadY;
    switch (_dir) {
      case 'down':
        newHeadY = headY + SIZE;
        break;
      case 'up':
        newHeadY = headY - SIZE;
        break;
      case 'left':
        newHeadX = headX - SIZE;
        break;
      case 'right':
        newHeadX = headX + SIZE;
        break;
    }
    let x = newHeadX || headX;
    let y = newHeadY || headY;
    _context.rect(x, y, SIZE, SIZE);
    _context.fill();
    return { x, y };
  }

  function detectFoodCollission() {
    const headX = _snake[0].x;
    const headY = _snake[0].y;
    //If the head of the _snake occupies the same square as the _food, it ate the _food
    if (_food.x === headX && _food.y === headY) {
      //Increase the _snake size
      let { x, y } = drawSquare(headX, headY);
      _snake.unshift({
        x,
        y
      });
      //Create new _food if the last one was consumed
      drawFood();
      //Update Score
      let scoreElement = document.getElementById('score');
      scoreElement.innerHTML = `Current Score: ${_snake.length - SNAKE_SIZE}`;
    }
  }

  function detectCrash() {
    let gameOver = false;
    let [{ x, y }] = _snake;
    //check for out of bounds
    if (x < 0 || x > FIELD_SIZE || y < 0 || y > FIELD_SIZE) {
      gameOver = true;
    }
    //check if the head occupies the same square as any other part of the body
    for (let i = Math.floor(_snake.length / 2); i < _snake.length; i++) {
      if (x === _snake[i].x && y === _snake[i].y) {
        gameOver = true;
        break;
      }
    }
    return gameOver;
  }

  function playGame() {
    //move the _snake
    moveSnake();
    //check if _snake at the _food
    detectFoodCollission();
    //check if _snake crashed with the walls
    if (detectCrash()) {
      clearInterval(_gameTimer);
      //Update scoreElement
      let scoreElement = document.getElementById('score');
      scoreElement.innerHTML = `Game Over! Current Score: ${_snake.length - SNAKE_SIZE}`;
    }
  }

  function initGame() {
    drawSnake();
    drawFood();
    _gameTimer = setInterval(playGame, 100);
    window.onkeydown = e => {
      _newDir = ARROW_MAP[e.keyCode] || _dir;
    };
  }

  //Game only needs to be initialed onload
  window.onload = initGame;
})(window, document);
